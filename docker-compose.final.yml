services:
  # Infrastructure services
  postgres:
    image: postgres:14-alpine
    container_name: codeguardian-postgres
    environment:
      POSTGRES_DB: codeguardian
      POSTGRES_USER: codeguardian
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U codeguardian"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codeguardian-network

  redis:
    image: redis:7-alpine
    container_name: codeguardian-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codeguardian-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: codeguardian-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codeguardian-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: codeguardian-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - codeguardian-network

  # Application services (using pre-built JARs)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.simple
    container_name: codeguardian-api-gateway
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      JWT_SECRET: your-256-bit-secret-key-for-jwt-token-generation-keep-it-secure-and-change-this-in-production
    networks:
      - codeguardian-network

  git-processor:
    build:
      context: ./git-processor
      dockerfile: Dockerfile.simple
    container_name: codeguardian-git-processor
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: codeguardian
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      GITHUB_WEBHOOK_SECRET: your-github-webhook-secret
      GITLAB_WEBHOOK_TOKEN: your-gitlab-webhook-token
    networks:
      - codeguardian-network

  code-analyzer:
    build:
      context: ./code-analyzer
      dockerfile: Dockerfile.simple
    container_name: codeguardian-code-analyzer
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      DB_USERNAME: codeguardian
      DB_PASSWORD: password
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - codeguardian-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: codeguardian-frontend
    depends_on:
      - api-gateway
      - git-processor
      - code-analyzer
    ports:
      - "3000:80"
    networks:
      - codeguardian-network

volumes:
  postgres_data:

networks:
  codeguardian-network:
    driver: bridge